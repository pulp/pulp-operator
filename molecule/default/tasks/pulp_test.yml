---
- name: Create the pulp.pulpproject.org/v1beta1.Pulp
  k8s:
    state: present
    namespace: '{{ namespace }}'
    definition: "{{ lookup('template', '/'.join([samples_dir, cr_file])) | from_yaml }}"
  vars:
    cr_file: 'pulpproject_v1beta1_pulp_cr.molecule.ci.yaml'

- name: Create role to allow patch/get on "{{ operator_service_account_name }}" serviceaccount
  k8s:
    state: present
    namespace: '{{ namespace }}'
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: Role
      metadata:
        name: "{{ operator_service_account_name }}-role"
      rules:
      - apiGroups:
        - ""
        resourceNames:
        - "{{ operator_service_account_name }}"
        resources:
        - serviceaccounts
        verbs:
        - patch
        - get

- name: Bind "{{ operator_service_account_name }}-role" to "{{ operator_service_account_name }}" serviceaccount
  k8s:
    state: present
    namespace: '{{ namespace }}'
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: "{{ operator_service_account_name }}-rolebinding"
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: Role
        name: "{{ operator_service_account_name }}-role"
      subjects:
      - kind: ServiceAccount
        name: "{{ operator_service_account_name }}"

- name: Wait 5m for database reconciliation to run
  k8s_info:
    api_version: '{{ custom_resource.apiVersion }}'
    kind: '{{ custom_resource.kind }}'
    namespace: '{{ namespace }}'
    name: '{{ custom_resource.metadata.name }}'
  register: cr
  until:
    - "'DatabaseTasksFinished' in (cr | json_query('resources[].status.conditions[].reason'))"
  delay: 6
  retries: 50
  vars:
    cr_file: 'pulpproject_v1beta1_pulp_cr.molecule.ci.yaml'
    custom_resource: "{{ lookup('template', '/'.join([samples_dir, cr_file])) | from_yaml }}"

- name: Wait 5m for web reconciliation to run
  k8s_info:
    api_version: '{{ custom_resource.apiVersion }}'
    kind: '{{ custom_resource.kind }}'
    namespace: '{{ namespace }}'
    name: '{{ custom_resource.metadata.name }}'
  register: cr
  until:
    - "'PulpWebTasksFinished' in (cr | json_query('resources[].status.conditions[].reason'))"
  delay: 6
  retries: 50
  vars:
    cr_file: 'pulpproject_v1beta1_pulp_cr.molecule.ci.yaml'
    custom_resource: "{{ lookup('template', '/'.join([samples_dir, cr_file])) | from_yaml }}"

- name: Wait 5m for api reconciliation to run
  k8s_info:
    api_version: '{{ custom_resource.apiVersion }}'
    kind: '{{ custom_resource.kind }}'
    namespace: '{{ namespace }}'
    name: '{{ custom_resource.metadata.name }}'
  register: cr
  until:
    - "'PulpApiTasksFinished' in (cr | json_query('resources[].status.conditions[].reason'))"
  delay: 6
  retries: 50
  vars:
    cr_file: 'pulpproject_v1beta1_pulp_cr.molecule.ci.yaml'
    custom_resource: "{{ lookup('template', '/'.join([samples_dir, cr_file])) | from_yaml }}"

- name: Wait 5m for content reconciliation to run
  k8s_info:
    api_version: '{{ custom_resource.apiVersion }}'
    kind: '{{ custom_resource.kind }}'
    namespace: '{{ namespace }}'
    name: '{{ custom_resource.metadata.name }}'
  register: cr
  until:
    - "'PulpContentTasksFinished' in (cr | json_query('resources[].status.conditions[].reason'))"
  delay: 6
  retries: 50
  vars:
    cr_file: 'pulpproject_v1beta1_pulp_cr.molecule.ci.yaml'
    custom_resource: "{{ lookup('template', '/'.join([samples_dir, cr_file])) | from_yaml }}"

- name: Wait 5m for worker reconciliation to run
  k8s_info:
    api_version: '{{ custom_resource.apiVersion }}'
    kind: '{{ custom_resource.kind }}'
    namespace: '{{ namespace }}'
    name: '{{ custom_resource.metadata.name }}'
  register: cr
  until:
    - "'PulpWorkerTasksFinished' in (cr | json_query('resources[].status.conditions[].reason'))"
  delay: 6
  retries: 50
  vars:
    cr_file: 'pulpproject_v1beta1_pulp_cr.molecule.ci.yaml'
    custom_resource: "{{ lookup('template', '/'.join([samples_dir, cr_file])) | from_yaml }}"

- name: Wait 10m for last checks to run
  k8s_info:
    api_version: '{{ custom_resource.apiVersion }}'
    kind: '{{ custom_resource.kind }}'
    namespace: '{{ namespace }}'
    name: '{{ custom_resource.metadata.name }}'
  register: cr
  until:
    - "'PulpOperatorFinishedExecution' in (cr | json_query('resources[].status.conditions[].reason'))"
  delay: 6
  retries: 100
  vars:
    cr_file: 'pulpproject_v1beta1_pulp_cr.molecule.ci.yaml'
    custom_resource: "{{ lookup('template', '/'.join([samples_dir, cr_file])) | from_yaml }}"

- name: Add assertions here
  assert:
    that: true
    fail_msg: FIXME Add real assertions for your operator
