---

# Upgrade Postgres (Managed Databases only)
#  * If postgres version is not 12, and not an external postgres instance (when managed_database is yes),
#    then run this playbook with include_tasks from database_configuration.yml
#  * Data will be streamed via a pg_dump from the postgres 12 pod to the postgres 13
#    pod via a pg_restore.

- k8s_status:
    api_version: "{{ api_version }}"
    kind: "{{ kind }}"
    name: "{{ ansible_operator_meta.name }}"
    namespace: "{{ ansible_operator_meta.namespace }}"
    conditions:
      - type: Database-Ready
        message: Scaling down Deployment for Postgres upgrade
        reason: ScalingDownDeploymentForPostgresUpgrade
        status: "False"
        lastTransitionTime: "{{ lookup('pipe', 'date --iso-8601=seconds') }}"

- name: Scale down Deployment for migration
  include_tasks: scale_down_deployment.yml

- name: Delete existing postgres configuration secret
  k8s:
    api_version: v1
    kind: Secret
    name: "{{ ansible_operator_meta.name }}-postgres-configuration"
    namespace: "{{ ansible_operator_meta.namespace }}"
    state: absent
    wait: yes

- k8s_status:
    api_version: "{{ api_version }}"
    kind: "{{ kind }}"
    name: "{{ ansible_operator_meta.name }}"
    namespace: "{{ ansible_operator_meta.namespace }}"
    conditions:
      - type: Database-Ready
        message: "Creating the new database configuration for postgres-{{ postgres_version }}"
        reason: "CreatingNewSecretForPostgres{{ postgres_version }}"
        status: "False"
        lastTransitionTime: "{{ lookup('pipe', 'date --iso-8601=seconds') }}"

- name: Create Database configuration with new -postgres-{{ postgres_version }} hostname
  k8s:
    apply: true
    definition: "{{ lookup('template', 'postgres_upgrade.secret.yaml.j2') }}"
  no_log: "{{ no_log }}"

- name: Set new database var to be used when configuring app credentials (resources_configuration.yml)
  set_fact:
    postgres_host: "{{ ansible_operator_meta.name }}-postgres-{{ postgres_version }}"
  no_log: "{{ no_log }}"

- k8s_status:
    api_version: "{{ api_version }}"
    kind: "{{ kind }}"
    name: "{{ ansible_operator_meta.name }}"
    namespace: "{{ ansible_operator_meta.namespace }}"
    conditions:
      - type: Database-Ready
        message: Recreating database StatefulSet resource after upgrading Postgres
        reason: RecreatingStatefulSetUpgradeTask
        status: "False"
        lastTransitionTime: "{{ lookup('pipe', 'date --iso-8601=seconds') }}"

- name: Create Database if no database is specified
  k8s:
    apply: true
    definition: "{{ lookup('template', 'postgres.yaml.j2') }}"
    wait: true
  register: create_statefulset_result

- name: Set postgres label if not defined by user
  set_fact:
    postgres_label_selector: "app.kubernetes.io/instance=postgres-{{ postgres_version }}-{{ ansible_operator_meta.name }}"
  when: postgres_label_selector is not defined

- block:
    - name: Get new postgres pod information
      k8s_info:
        kind: Pod
        namespace: "{{ ansible_operator_meta.namespace }}"
        label_selectors:
          - "{{ postgres_label_selector }}"
          - "app.kubernetes.io/version={{ postgres_version }}"
        field_selectors:
          - status.phase=Running
      register: postgres_pod
      until:
        - "postgres_pod['resources'] | length"
        - "postgres_pod['resources'][0]['status']['phase'] == 'Running'"
        - "postgres_pod['resources'][0]['status']['containerStatuses'][0]['ready'] == true"
      delay: 5
      retries: 60
- rescue:
    - name: Set error message
      set_fact:
        error_msg: "A Postgres {{ postgres_version }} Pod with the {{ postgres_label_selector }} label \
              is not available and in the Running state"

    - k8s_status:
        api_version: "{{ api_version }}"
        kind: "{{ kind }}"
        name: "{{ ansible_operator_meta.name }}"
        namespace: "{{ ansible_operator_meta.namespace }}"
        conditions:
          - type: Database-Ready
            message: "{{ error_msg }}"
            reason: UpgradePostgresError
            status: "False"
            lastTransitionTime: "{{ lookup('pipe', 'date --iso-8601=seconds') }}"

    - name: Handle error
      import_tasks: error_handling.yml

    - name: Fail with message if Postgres Pod doesn't come up
      fail:
        msg: "{{ error_msg }}"

- name: Set the resource pod name as a variable.
  set_fact:
    postgres_pod_name: "{{ postgres_pod['resources'][0]['metadata']['name'] }}"

- name: Set full resolvable host name for old postgres pod
  set_fact:
    resolvable_db_host: "{{ ansible_operator_meta.name }}-postgres-svc.{{ ansible_operator_meta.namespace }}.svc.cluster.local"  # yamllint disable-line rule:line-length
  no_log: "{{ no_log }}"


- k8s_status:
    api_version: "{{ api_version }}"
    kind: "{{ kind }}"
    name: "{{ ansible_operator_meta.name }}"
    namespace: "{{ ansible_operator_meta.namespace }}"
    conditions:
      - type: Database-Ready
        message: Dumping database for Postgres upgrade task
        reason: DumpingDatabaseUpgradeTask
        status: "False"
        lastTransitionTime: "{{ lookup('pipe', 'date --iso-8601=seconds') }}"

- name: Set pg_dump command
  set_fact:
    pgdump: >-
      pg_dump
      -h {{ resolvable_db_host }}
      -U {{ postgres_user }}
      -d {{ postgres_database }}
      -p {{ postgres_port }}
      -F custom
  no_log: "{{ no_log }}"

- k8s_status:
    api_version: "{{ api_version }}"
    kind: "{{ kind }}"
    name: "{{ ansible_operator_meta.name }}"
    namespace: "{{ ansible_operator_meta.namespace }}"
    conditions:
      - type: Database-Ready
        message: Restoring database for Postgres upgrade task
        reason: RestoringDatabaseUpgradeTask
        status: "False"
        lastTransitionTime: "{{ lookup('pipe', 'date --iso-8601=seconds') }}"

- name: Set pg_restore command
  set_fact:
    pg_restore: >-
      pg_restore
      -U {{ postgres_user }}
      -d {{ postgres_database }}
  no_log: "{{ no_log }}"

- k8s_status:
    api_version: "{{ api_version }}"
    kind: "{{ kind }}"
    name: "{{ ansible_operator_meta.name }}"
    namespace: "{{ ansible_operator_meta.namespace }}"
    conditions:
      - type: Database-Ready
        message: Streaming backup from pg_dump to the new container (upgrade task)
        reason: StreamingBackupToNewContainer
        status: "False"
        lastTransitionTime: "{{ lookup('pipe', 'date --iso-8601=seconds') }}"

- name: Stream backup from pg_dump to the new postgresql container
  k8s_exec:
    namespace: "{{ ansible_operator_meta.namespace }}"
    pod: "{{ postgres_pod_name }}"
    command: |
      bash -c """
      set -e -o pipefail
      PGPASSWORD={{ postgres_pass }} {{ pgdump }} | PGPASSWORD={{ postgres_pass }} {{ pg_restore }}
      echo 'Successful'
      """
  no_log: "{{ no_log }}"
  register: data_migration
  failed_when: "'Successful' not in data_migration.stdout"

- name: Set flag signifying that this instance has been migrated
  set_fact:
    upgraded_postgres_version: '13'

- k8s_status:
    api_version: "{{ api_version }}"
    kind: "{{ kind }}"
    name: "{{ ansible_operator_meta.name }}"
    namespace: "{{ ansible_operator_meta.namespace }}"
    conditions:
      - type: Database-Ready
        message: Removing old Postgres StatefulSet
        reason: RemovingOldPostgresStatefulSet
        status: "False"
        lastTransitionTime: "{{ lookup('pipe', 'date --iso-8601=seconds') }}"

# Cleanup old Postgres resources
- name: Remove old Postgres StatefulSet
  k8s:
    kind: StatefulSet
    api_version: v1
    namespace: "{{ ansible_operator_meta.namespace }}"
    name: "{{ ansible_operator_meta.name }}-postgres"
    state: absent
    wait: true

- k8s_status:
    api_version: "{{ api_version }}"
    kind: "{{ kind }}"
    name: "{{ ansible_operator_meta.name }}"
    namespace: "{{ ansible_operator_meta.namespace }}"
    conditions:
      - type: Database-Ready
        message: Removing old Postgres Service
        reason: RemovingOldPostgresService
        status: "False"
        lastTransitionTime: "{{ lookup('pipe', 'date --iso-8601=seconds') }}"

- name: Remove old Postgres Service
  k8s:
    kind: Service
    api_version: v1
    namespace: "{{ ansible_operator_meta.namespace }}"
    name: "{{ ansible_operator_meta.name }}-postgres-svc"
    state: absent

- k8s_status:
    api_version: "{{ api_version }}"
    kind: "{{ kind }}"
    name: "{{ ansible_operator_meta.name }}"
    namespace: "{{ ansible_operator_meta.namespace }}"
    conditions:
      - type: Database-Ready
        message: Removing old Postgres PVC
        reason: RemovingOldPostgresPVC
        status: "False"
        lastTransitionTime: "{{ lookup('pipe', 'date --iso-8601=seconds') }}"

- name: Remove old persistent volume claim
  k8s:
    kind: PersistentVolumeClaim
    api_version: v1
    namespace: "{{ ansible_operator_meta.namespace }}"
    name: "postgres-{{ ansible_operator_meta.name }}-postgres-0"
    state: absent
  when:
    - postgres_keep_pvc_after_upgrade is defined
    - postgres_keep_pvc_after_upgrade | length

- k8s_status:
    api_version: "{{ api_version }}"
    kind: "{{ kind }}"
    name: "{{ ansible_operator_meta.name }}"
    namespace: "{{ ansible_operator_meta.namespace }}"
    conditions:
      - type: Database-Ready
        message: All Postgres upgrade tasks ran successfully
        reason: DatabaseTasksFinished
        status: "True"
        lastTransitionTime: "{{ lookup('pipe', 'date --iso-8601=seconds') }}"
