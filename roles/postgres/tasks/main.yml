---
- name: Set apiVersion and kind variables
  set_fact:
    api_version: '{{ hostvars["localhost"]["inventory_file"].split("/")[4:6] | join("/")  }}'
    kind: '{{ hostvars["localhost"]["inventory_file"].split("/")[6]  }}'

- k8s_status:
    api_version: "{{ api_version }}"
    kind: "{{ kind }}"
    name: "{{ ansible_operator_meta.name }}"
    namespace: "{{ ansible_operator_meta.namespace }}"
    conditions:
      - type: "{{ deployment_type | capitalize }}-Operator-Finished-Execution"
        message: "{{ deployment_type | capitalize }} operator tasks running"
        reason: OperatorRunning
        status: "False"
        lastTransitionTime: "{{ lookup('pipe', 'date --iso-8601=seconds') }}"

- name: Set node affinity
  set_fact:
    _node_affinity: "{{ raw_spec['affinity']['node_affinity'] | default({}) }}"
  when: affinity is defined and affinity.node_affinity is defined

- name: Obtain custom resource information
  set_fact:
    custom_resource: "{{ hostvars[inventory_hostname][custom_resource_key] }}"
    custom_resource_status: "{{ hostvars[inventory_hostname][custom_resource_key]['status'] | default({}) }}"

- name: Check for specified PostgreSQL configuration
  k8s_info:
    kind: Secret
    namespace: '{{ ansible_operator_meta.namespace }}'
    name: '{{ postgres_configuration_secret }}'
  register: _custom_pg_config_resources
  no_log: "{{ no_log }}"
  when: postgres_configuration_secret | length

- name: Check for default PostgreSQL configuration
  k8s_info:
    kind: Secret
    namespace: '{{ ansible_operator_meta.namespace }}'
    name: '{{ ansible_operator_meta.name }}-postgres-configuration'
  register: _default_pg_config_resources
  no_log: "{{ no_log }}"

- name: Check for old PostgreSQL configuration secret
  k8s_info:
    kind: Secret
    namespace: '{{ ansible_operator_meta.namespace }}'
    name: '{{ postgres_migrant_configuration_secret }}'
  register: old_pg_config
  no_log: "{{ no_log }}"
  when: postgres_migrant_configuration_secret | length

- name: Set proper database name when migrating from old deployment
  set_fact:
    database_name: "{{ old_pg_config['resources'][0]['data']['database'] | b64decode }}"
    database_username: "{{ old_pg_config['resources'][0]['data']['username'] | b64decode }}"
  no_log: "{{ no_log }}"
  when:
    - old_pg_config['resources'] is defined
    - old_pg_config['resources'] | length

- name: Set PostgreSQL configuration
  set_fact:
    _pg_config: '{{ _custom_pg_config_resources["resources"] | default([]) | length | ternary(_custom_pg_config_resources, _default_pg_config_resources) }}'
  no_log: "{{ no_log }}"

- k8s_status:
    api_version: "{{ api_version }}"
    kind: "{{ kind }}"
    name: "{{ ansible_operator_meta.name }}"
    namespace: "{{ ansible_operator_meta.namespace }}"
    conditions:
      - type: Database-Ready
        message: Creating database Secret resource
        reason: CreatingSecret
        status: "False"
        lastTransitionTime: "{{ lookup('pipe', 'date --iso-8601=seconds') }}"

- block:

    - name: Create Database configuration
      k8s:
        apply: true
        definition: "{{ lookup('template', 'postgres.secret.yaml.j2') }}"
      no_log: "{{ no_log }}"

    - name: Read Database Configuration
      k8s_info:
        kind: Secret
        namespace: '{{ ansible_operator_meta.namespace }}'
        name: '{{ ansible_operator_meta.name }}-postgres-configuration'
      register: _generated_pg_config_resources
      no_log: "{{ no_log }}"

  when: not _pg_config['resources'] | default([]) | length

- name: Record migrant database secret
  set_fact:
    recorded_db_migration_secret: "{{ custom_resource_status['migrantDatabaseConfigurationSecret'] }}"
  when:
    - custom_resource_status['migrantDatabaseConfigurationSecret'] is defined

- name: Check if data migration has been performed
  set_fact:
    database_status_present: true
  when:
    - recorded_db_migration_secret is defined
    - postgres_migrant_configuration_secret is defined
    - recorded_db_migration_secret == postgres_migrant_configuration_secret


- name: Set PostgreSQL Configuration
  set_fact:
    pg_config: '{{ _generated_pg_config_resources["resources"] | default([]) | length | ternary(_generated_pg_config_resources, _pg_config) }}'
  no_log: "{{ no_log }}"

- name: Set user provided postgres image
  set_fact:
    _custom_postgres_image: "{{ postgres_image }}"
  when:
    - postgres_image is defined and postgres_image != ''

- name: Set Postgres image URL
  set_fact:
    _postgres_image: "{{ _custom_postgres_image | default(lookup('env', 'RELATED_IMAGE_PULP_POSTGRES')) | default(_postgres_image, true) }}"

- name: Store Database Configuration
  set_fact:
    postgres_user: "{{ pg_config['resources'][0]['data']['username'] | b64decode }}"
    postgres_pass: "{{ pg_config['resources'][0]['data']['password'] | b64decode }}"
    postgres_database: "{{ pg_config['resources'][0]['data']['database'] | b64decode }}"
    postgres_port: "{{ pg_config['resources'][0]['data']['port'] | b64decode }}"
    postgres_host: "{{ pg_config['resources'][0]['data']['host'] | b64decode }}"
    postgres_sslmode: "{{ pg_config['resources'][0]['data']['sslmode'] | default('prefer'|b64encode) | b64decode }}"
  no_log: "{{ no_log }}"

- name: Set database as managed
  set_fact:
    managed_database: "{{ pg_config['resources'][0]['data']['type'] | default('') | b64decode == 'managed' }}"

- name: Set postgres label if not defined by user
  set_fact:
    postgres_label_selector: "app.kubernetes.io/instance=postgres-{{ ansible_operator_meta.name }}"
  when: postgres_label_selector is not defined

- name: Get the old postgres pod information
  k8s_info:
    kind: Pod
    namespace: "{{ ansible_operator_meta.namespace }}"
    label_selectors:
      - "{{ postgres_label_selector }}"
      - app.kubernetes.io/version='12'
    field_selectors:
      - status.phase=Running
  register: old_postgres_pod

- block:
    - k8s_status:
        api_version: "{{ api_version }}"
        kind: "{{ kind }}"
        name: "{{ ansible_operator_meta.name }}"
        namespace: "{{ ansible_operator_meta.namespace }}"
        conditions:
          - type: Database-Ready
            message: Creating database StatefulSet resource
            reason: CreatingStatefulSet
            status: "False"
            lastTransitionTime: "{{ lookup('pipe', 'date --iso-8601=seconds') }}"

    - name: Create Database if no database is specified
      k8s:
        apply: true
        definition: "{{ lookup('template', 'postgres.yaml.j2') }}"

  when: managed_database

- name: Look up details for this deployment
  k8s_info:
    api_version: "{{ api_version }}"
    kind: "{{ kind }}"
    name: "{{ ansible_operator_meta.name }}"
    namespace: "{{ ansible_operator_meta.namespace }}"
  register: this_pulp

- name: Check if postgres pod is running and version 12
  block:
    - name: Set path to PG_VERSION file for given container image
      set_fact:
        path_to_pg_version: '{{ postgres_data_path }}/PG_VERSION'

    - name: Get old PostgreSQL version
      k8s_exec:
        namespace: "{{ ansible_operator_meta.namespace }}"
        pod: "{{ old_postgres_pod['resources'][0]['metadata']['name'] }}"
        command: |
          bash -c """
          cat {{ path_to_pg_version }}
          """
      register: _old_pg_version

    - name: Upgrade data dir from Postgres 12 to 13 if applicable
      include_tasks: upgrade_postgres.yml
      when:
        - _old_pg_version.stdout | default('0') | trim == '12'
  when:
    - managed_database
    - this_pulp['resources'][0]['status']['upgradedPostgresVersion'] | default('none') != '12'
    - old_postgres_pod['resources'] | length  # upgrade is complete and old pg pod has been removed

- name: Migrate data from old Openshift instance
  import_tasks: migrate_data.yml
  when:
    - old_pg_config['resources'] is defined
    - old_pg_config['resources'] | length
    - not database_status_present

- name: Check PostgreSQL status
  k8s_info:
    api_version: v1
    kind: StatefulSet
    namespace: '{{ ansible_operator_meta.namespace }}'
    name: '{{ ansible_operator_meta.name }}-postgres-{{ postgres_version }}'
  register: _pg_sts_status

# This status will probably not reflect the real state during the first playbook execution
# I thought to put a wait_for here, but it would just delay the execution of the other tasks
- k8s_status:
    api_version: "{{ api_version }}"
    kind: "{{ kind }}"
    name: "{{ ansible_operator_meta.name }}"
    namespace: "{{ ansible_operator_meta.namespace }}"
    conditions:
      - type: Database-Ready
        message: All Postgres tasks ran successfully
        reason: DatabaseTasksFinished
        status: "True"
        lastTransitionTime: "{{ lookup('pipe', 'date --iso-8601=seconds') }}"
#  when: _pg_sts_status['resources'][0]['status']['availableReplicas'] == _pg_sts_status['resources'][0]['status']['replicas']
