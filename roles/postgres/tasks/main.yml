---

- name: Obtain custom resource information
  set_fact:
    custom_resource: "{{ hostvars[inventory_hostname][custom_resource_key] }}"
    custom_resource_status: "{{ hostvars[inventory_hostname][custom_resource_key]['status'] }}"

- name: Record migrant database secret
  set_fact:
    recorded_db_migration_secret: "{{ custom_resource_status['migrantDatabaseConfigurationSecret'] }}"
  when:
    - custom_resource_status['migrantDatabaseConfigurationSecret'] is defined

- name: Check if data migration has been performed
  set_fact:
    database_status_present: true
  when:
    - recorded_db_migration_secret is defined
    - postgres_migrant_configuration_secret is defined
    - recorded_db_migration_secret == postgres_migrant_configuration_secret

- name: Check for specified PostgreSQL configuration
  k8s_info:
    kind: Secret
    namespace: '{{ ansible_operator_meta.namespace }}'
    name: '{{ postgres_configuration_secret }}'
  register: _custom_pg_config_resources
  no_log: true
  when: postgres_configuration_secret | length

- name: Check for default PostgreSQL configuration
  k8s_info:
    kind: Secret
    namespace: '{{ ansible_operator_meta.namespace }}'
    name: '{{ ansible_operator_meta.name }}-postgres-configuration'
  register: _default_pg_config_resources
  no_log: true

- name: Check for old PostgreSQL configuration secret
  k8s_info:
    kind: Secret
    namespace: '{{ ansible_operator_meta.namespace }}'
    name: '{{ postgres_migrant_configuration_secret }}'
  register: old_pg_config
  no_log: true
  when: postgres_migrant_configuration_secret | length

- name: Set proper database name when migrating from old deployment
  set_fact:
    database_name: "{{ old_pg_config['resources'][0]['data']['database'] | b64decode }}"
    database_username: "{{ old_pg_config['resources'][0]['data']['username'] | b64decode }}"
  no_log: true
  when:
    - old_pg_config['resources'] is defined
    - old_pg_config['resources'] | length

- name: Set PostgreSQL configuration
  set_fact:
    _pg_config: '{{ _custom_pg_config_resources["resources"] | default([]) | length | ternary(_custom_pg_config_resources, _default_pg_config_resources) }}'
  no_log: true

- block:
    - name: Create Database configuration
      k8s:
        apply: true
        definition: "{{ lookup('template', 'postgres.secret.yaml.j2') }}"
      no_log: true

    - name: Read Database Configuration
      k8s_info:
        kind: Secret
        namespace: '{{ ansible_operator_meta.namespace }}'
        name: '{{ ansible_operator_meta.name }}-postgres-configuration'
      register: _generated_pg_config_resources
      no_log: true

  when: not _pg_config['resources'] | default([]) | length

- name: Set PostgreSQL Configuration
  set_fact:
    pg_config: '{{ _generated_pg_config_resources["resources"] | default([]) | length | ternary(_generated_pg_config_resources, _pg_config) }}'
  no_log: true

- name: Ensure storage request is set
  set_fact:
    postgres_resource_requirements: "{{ postgres_resource_requirements|combine(postgres_default_storage, recursive=True) }}"
  when: postgres_resource_requirements.requests is undefined or postgres_resource_requirements.requests.storage is undefined

- name: Set user provided postgres image
  set_fact:
    _custom_postgres_image: "{{ postgres_image }}"
  when:
    - postgres_image is defined and postgres_image != ''

- name: Set Postgres image URL
  set_fact:
    _postgres_image: "{{ _custom_postgres_image | default(lookup('env', 'RELATED_IMAGE_POSTGRES')) }}"

- name: Create Database if no database is specified
  k8s:
    apply: true
    definition: "{{ lookup('template', 'postgres.yaml.j2') }}"
  when:
    - pg_config['resources'][0]['data']['type'] | default('') | b64decode == 'managed'

- name: Store Database Configuration
  set_fact:
    postgres_user: "{{ pg_config['resources'][0]['data']['username'] | b64decode }}"
    postgres_pass: "{{ pg_config['resources'][0]['data']['password'] | b64decode }}"
    postgres_database: "{{ pg_config['resources'][0]['data']['database'] | b64decode }}"
    postgres_port: "{{ pg_config['resources'][0]['data']['port'] | b64decode }}"
    postgres_host: "{{ pg_config['resources'][0]['data']['host'] | b64decode }}"
    postgres_sslmode: "{{ pg_config['resources'][0]['data']['sslmode'] | default('prefer'|b64encode) | b64decode }}"
  no_log: true

- name: Migrate data from old Openshift instance
  import_tasks: migrate_data.yml
  when:
    - old_pg_config['resources'] is defined
    - old_pg_config['resources'] | length
    - not database_status_present
