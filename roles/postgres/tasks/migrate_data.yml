---

- name: Store Database Configuration
  set_fact:
    migrant_postgres_user: "{{ old_pg_config['resources'][0]['data']['username'] | b64decode }}"
    migrant_postgres_pass: "{{ old_pg_config['resources'][0]['data']['password'] | b64decode }}"
    migrant_postgres_database: "{{ old_pg_config['resources'][0]['data']['database'] | b64decode }}"
    migrant_postgres_port: "{{ old_pg_config['resources'][0]['data']['port'] | b64decode }}"
    migrant_postgres_host: "{{ old_pg_config['resources'][0]['data']['host'] | b64decode }}"
    migrant_postgres_sslmode: "{{ pg_config['resources'][0]['data']['sslmode'] | default('prefer'|b64encode) | b64decode }}"
  no_log: "{{ no_log }}"

- name: Default label selector to custom resource generated postgres
  set_fact:
    postgres_label_selector: "app.kubernetes.io/instance=postgres-{{ ansible_operator_meta.name }}"
  when: postgres_label_selector is not defined

- name: Get the postgres pod information
  k8s_info:
    kind: Pod
    namespace: '{{ ansible_operator_meta.namespace }}'
    label_selectors:
      - "{{ postgres_label_selector }}"
      - "app.kubernetes.io/version={{ postgres_version }}"
  register: postgres_pod
  until: "postgres_pod['resources'][0]['status']['phase'] == 'Running'"
  delay: 5
  retries: 60

- name: Set the resource pod name as a variable.
  set_fact:
    postgres_pod_name: "{{ postgres_pod['resources'][0]['metadata']['name'] }}"

- k8s_status:
    api_version: "{{ api_version }}"
    kind: "{{ kind }}"
    name: "{{ ansible_operator_meta.name }}"
    namespace: "{{ ansible_operator_meta.namespace }}"
    conditions:
      - type: Database-Ready
        message: Scaling down Deployments (api, content, worker, web, resource-manager) for migration of old_pg_config
        reason: ScalingDownDeploymentForMigration
        status: "False"
        lastTransitionTime: "{{ lookup('pipe', 'date --iso-8601=seconds') }}"

- include: scale_down.yml deployment_name={{ item }}
  with_items:
    - "{{ ansible_operator_meta.name }}-api"
    - "{{ ansible_operator_meta.name }}-content"
    - "{{ ansible_operator_meta.name }}-resource-manager"
    - "{{ ansible_operator_meta.name }}-worker"
    - "{{ ansible_operator_meta.name }}-web"

- k8s_status:
    api_version: "{{ api_version }}"
    kind: "{{ kind }}"
    name: "{{ ansible_operator_meta.name }}"
    namespace: "{{ ansible_operator_meta.namespace }}"
    conditions:
      - type: Database-Ready
        message: Dumping database for migration
        reason: DumpingDatabaseForMigration
        status: "False"
        lastTransitionTime: "{{ lookup('pipe', 'date --iso-8601=seconds') }}"

- name: Set pg_dump command
  set_fact:
    pgdump: >-
      pg_dump
      -h {{ migrant_postgres_host }}
      -U {{ migrant_postgres_user }}
      -d {{ migrant_postgres_database }}
      -p {{ migrant_postgres_port }}
      -F custom
  no_log: "{{ no_log }}"

- k8s_status:
    api_version: "{{ api_version }}"
    kind: "{{ kind }}"
    name: "{{ ansible_operator_meta.name }}"
    namespace: "{{ ansible_operator_meta.namespace }}"
    conditions:
      - type: Database-Ready
        message: Restoring database for migration
        reason: RestoringDatabaseForMigration
        status: "False"
        lastTransitionTime: "{{ lookup('pipe', 'date --iso-8601=seconds') }}"

- name: Set pg_restore command
  set_fact:
    psql_restore: >-
      pg_restore --clean --if-exists
      -U {{ postgres_user }}
      -d {{ postgres_database }}
  no_log: "{{ no_log }}"

- k8s_status:
    api_version: "{{ api_version }}"
    kind: "{{ kind }}"
    name: "{{ ansible_operator_meta.name }}"
    namespace: "{{ ansible_operator_meta.namespace }}"
    conditions:
      - type: Database-Ready
        message: Streaming backup from pg_dump to the new container (migration task)
        reason: StreamingBackupToNewContainer
        status: "False"
        lastTransitionTime: "{{ lookup('pipe', 'date --iso-8601=seconds') }}"

- name: Stream backup from pg_dump to the new postgresql container
  k8s_exec:
    namespace: "{{ ansible_operator_meta.namespace }}"
    pod: "{{ postgres_pod_name }}"
    command: |
      bash -c """
      set -e -o pipefail
      PGPASSWORD={{ migrant_postgres_pass }} {{ pgdump }} | PGPASSWORD={{ postgres_pass }} {{ psql_restore }}
      echo 'Successful'
      """
  register: data_migration
  no_log: "{{ no_log }}"
  failed_when: "'Successful' not in data_migration['stdout']"

- name: Set flag signifying that this instance has been migrated
  set_fact:
    postgres_migrated_from_secret: "{{ postgres_migrant_configuration_secret }}"

- k8s_status:
    api_version: "{{ api_version }}"
    kind: "{{ kind }}"
    name: "{{ ansible_operator_meta.name }}"
    namespace: "{{ ansible_operator_meta.namespace }}"
    conditions:
      - type: Database-Ready
        message: All Postgres migrations tasks ran successfully
        reason: DatabaseTasksFinished
        status: "True"
        lastTransitionTime: "{{ lookup('pipe', 'date --iso-8601=seconds') }}"

- name: Migration succesful from previous database
  debug:
    msg: "Database migrated from secret: {{ postgres_migrated_from_secret }}"
