---
apiVersion: v1
kind: Deployment
metadata:
  name: "{{ ansible_operator_meta.name }}-worker"
  namespace: "{{ ansible_operator_meta.namespace }}"
  annotations:
    email: pulp-dev@redhat.com
    ignore-check.kube-linter.io/no-liveness-probe: "Port isn't exposed"
    ignore-check.kube-linter.io/no-node-affinity: "Do not check node affinity"
  labels:
    app.kubernetes.io/name: '{{ deployment_type }}-worker'
    app.kubernetes.io/instance: '{{ deployment_type }}-worker-{{ ansible_operator_meta.name }}'
    app.kubernetes.io/component: worker
    app.kubernetes.io/part-of: '{{ deployment_type }}'
    app.kubernetes.io/managed-by: '{{ deployment_type }}-operator'
    owner: pulp-dev
spec:
  replicas: {{ worker.replicas }}
{% if worker.strategy is defined %}
  strategy:
    type: {{ worker.strategy.type }}
{% if worker.strategy.type == "Recreate" %}
    rollingUpdate: null
{% elif worker.strategy.type == "RollingUpdate" %}
    rollingUpdate:
      maxSurge:  {{ worker.strategy.rollingUpdate.maxSurge | default("25%")}}
      maxUnavailable: {{ worker.strategy.rollingUpdate.maxUnavailable | default("25%")}}
{% endif %}
{% endif %}
  selector:
    matchLabels:
      app.kubernetes.io/name: '{{ deployment_type }}-worker'
      app.kubernetes.io/instance: '{{ deployment_type }}-worker-{{ ansible_operator_meta.name }}'
      app.kubernetes.io/component: worker
      app.kubernetes.io/part-of: '{{ deployment_type }}'
      app.kubernetes.io/managed-by: '{{ deployment_type }}-operator'
  template:
    metadata:
      labels:
        app.kubernetes.io/name: '{{ deployment_type }}-worker'
        app.kubernetes.io/instance: '{{ deployment_type }}-worker-{{ ansible_operator_meta.name }}'
        app.kubernetes.io/component: worker
        app.kubernetes.io/part-of: '{{ deployment_type }}'
        app.kubernetes.io/managed-by: '{{ deployment_type }}-operator'
    spec:
{% if _node_affinity is defined %}
      affinity:
        nodeAffinity: {{ _node_affinity }}
{% endif %}
{% if is_k8s %}
      securityContext:
        runAsUser: 700
        fsGroup: 700
{% endif %}
{% if node_selector %}
      nodeSelector:
        {{ node_selector | indent(width=8) }}
{% endif %}
{% if tolerations %}
      tolerations:
        {{ tolerations | indent(width=8) }}
{% endif %}
      volumes:
        - name: {{ ansible_operator_meta.name }}-server
          secret:
            secretName: {{ ansible_operator_meta.name }}-server
            items:
              - path: settings.py
                key: settings.py
        - name: {{ ansible_operator_meta.name }}-db-fields-encryption
          secret:
            secretName: {{ db_fields_encryption_secret }}
            items:
              - path: database_fields.symmetric.key
                key: database_fields.symmetric.key
{% if signing_secret is defined %}
        - name: {{ ansible_operator_meta.name }}-signing-scripts
          configMap:
            name: {{ signing_scripts_configmap }}
            defaultMode: 0755
        - name: {{ ansible_operator_meta.name }}-signing-galaxy
          secret:
            secretName: {{ signing_secret }}
            items:
              - path: signing_service.gpg
                key: signing_service.gpg
              - path: signing_service.asc
                key: signing_service.asc
{% endif %}
{% if is_file_storage %}
        - name: file-storage
          persistentVolumeClaim:
            claimName: {{ ansible_operator_meta.name }}-file-storage
{% else %}
        - name: tmp-file-storage
          emptyDir: {}
{% endif %}
        - name: {{ ansible_operator_meta.name }}-ansible-tmp
          emptyDir: {}
      serviceAccountName: '{{ ansible_operator_meta.name }}'
{% if topology_spread_constraints %}
      topologySpreadConstraints:
        {{ topology_spread_constraints | indent(width=8) }}
{% endif %}
      containers:
        - name: worker
          image: "{{ _image }}"
          imagePullPolicy: "{{ image_pull_policy }}"
          # We set args, not command, so as to not override the entrypoint script
          args: ["pulp-worker"]
          env:
            - name: POSTGRES_SERVICE_HOST
              value: "{{ postgres_host }}"
            - name: POSTGRES_SERVICE_PORT
              value: "{{ postgres_port }}"
{% if pulp_combined_settings.cache_enabled %}
            - name: REDIS_SERVICE_HOST
              value: "{{ ansible_operator_meta.name }}-redis-svc"
            - name: REDIS_SERVICE_PORT
              value: "{{ pulp_combined_settings.redis_port }}"
{% endif %}
{% if signing_secret is defined %}
            - name: PULP_SIGNING_KEY_FINGERPRINT
              value: "{{ signing_key_fingerprint }}"
{% endif %}
          readinessProbe:
            exec:
              command:
                - /usr/bin/wait_on_postgres.py
            failureThreshold: 10
            initialDelaySeconds: 30
            periodSeconds: 25
            timeoutSeconds: 10
          volumeMounts:
            - name: {{ ansible_operator_meta.name }}-ansible-tmp
              mountPath: "/.ansible/tmp/"
            - name: {{ ansible_operator_meta.name }}-server
              mountPath: "/etc/pulp/settings.py"
              subPath: settings.py
              readOnly: true
            - name: {{ ansible_operator_meta.name }}-db-fields-encryption
              mountPath: "/etc/pulp/keys/database_fields.symmetric.key"
              subPath: database_fields.symmetric.key
              readOnly: true
{% if signing_secret is defined %}
            - name: {{ ansible_operator_meta.name }}-signing-scripts
              mountPath: "/var/lib/pulp/scripts/collection_sign.sh"
              subPath: collection_sign.sh
              readOnly: true
            - name: {{ ansible_operator_meta.name }}-signing-scripts
              mountPath: "/var/lib/pulp/scripts/container_sign.sh"
              subPath: container_sign.sh
              readOnly: true
            - name: {{ ansible_operator_meta.name }}-signing-galaxy
              mountPath: "/etc/pulp/keys/signing_service.gpg"
              subPath: signing_service.gpg
              readOnly: true
            - name: {{ ansible_operator_meta.name }}-signing-galaxy
              mountPath: "/etc/pulp/keys/signing_service.asc"
              subPath: signing_service.asc
              readOnly: true
{% endif %}
{% if is_file_storage %}
            - name: file-storage
              readOnly: false
              mountPath: "/var/lib/pulp"
{% else %}
            - name: tmp-file-storage
              mountPath: "/var/lib/pulp/tmp"
{% endif %}
{% if worker.resource_requirements is defined %}
          resources: {{ worker.resource_requirements }}
{% endif %}
