---

- name: Delete any existing management pod
  k8s:
    name: "{{ ansible_operator_meta.name }}-backup-manager"
    kind: Pod
    namespace: "{{ backup_pvc_namespace }}"
    state: absent
    force: true
    wait: true

# Check to make sure provided pvc exists, error loudly if not.  Otherwise, the management pod will just stay in pending state forever.
- name: Check provided PVC exists
  k8s_info:
    name: "{{ backup_pvc }}"
    kind: PersistentVolumeClaim
    namespace: "{{ backup_pvc_namespace }}"
  register: provided_pvc
  when:
    - backup_pvc != ''

- name: Surface error to user
  block:
    - name: Set error message
      set_fact:
        error_msg: "{{ backup_pvc }} does not exist, please create this pvc first."

    - name: Handle error
      import_tasks: error_handling.yml

    - name: Fail early if pvc is defined but does not exist
      fail:
        msg: "{{ backup_pvc }} does not exist, please create this pvc first."
  when:
    - backup_pvc != ''
    - provided_pvc.resources | length == 0

# If backup_pvc is defined, use in management-pod.yml.j2
- name: Set default pvc name
  set_fact:
    _default_backup_pvc: "{{ deployment_name }}-backup-claim"

# by default, it will re-use the old pvc if already created (unless pvc is provided)
- name: Set PVC to use for backup
  set_fact:
    backup_claim: "{{ backup_pvc | default(_default_backup_pvc, true) }}"

- name: Create persistent volume claim for backup
  k8s:
    state: present
    definition: "{{ lookup('template', 'templates/' + item + '.pvc.yaml.j2') | from_yaml }}"
  with_items:
    - backup
  when:
    - backup_pvc == '' or backup_pvc is not defined

- name: Remove ownerReferences from backup-claim pvc to avoid garbage collection
  k8s:
    definition:
      apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: '{{ backup_claim }}'
        namespace: '{{ backup_pvc_namespace }}'
        ownerReferences: null

- name: Get Pulp custom resource object
  k8s_info:
    version: v1beta1
    kind: Pulp
    namespace: '{{ ansible_operator_meta.namespace }}'
    name: '{{ deployment_name }}'
  register: _custom_resource

- name: Set Pulp object
  set_fact:
    _pulp: "{{ _custom_resource['resources'][0] }}"

- name: Set apiVersion
  set_fact:
    api_version: "{{ _pulp['apiVersion'] }}"

- name: Set user specified spec
  set_fact:
    cr_spec: "{{ _pulp['spec'] }}"

- name: Set pulp status
  set_fact:
    status: "{{ _pulp['status'] }}"

- name: Set pulp admin secret if found
  set_fact:
    admin_password_secret: "{{ status['adminPasswordSecret'] }}"
  when:
    - status['adminPasswordSecret'] is defined
    - status['adminPasswordSecret'] | length

- name: Set pulp database configuration secret if found
  set_fact:
    postgres_configuration_secret: "{{ status['databaseConfigurationSecret'] }}"
  when:
    - status['databaseConfigurationSecret'] is defined
    - status['databaseConfigurationSecret'] | length

- name: Set pulp storage type if found
  set_fact:
    storage_type: "{{ status['storageType'] }}"
  when:
    - status['storageType'] is defined
    - status['storageType'] | length

- name: Set pulp file storage claim if found
  set_fact:
    storage_claim: "{{ status['storagePersistentVolumeClaim'] }}"
  when:
    - status['storagePersistentVolumeClaim'] is defined
    - status['storagePersistentVolumeClaim'] | length

- name: Set pulp object storage secret if found
  set_fact:
    storage_secret: "{{ status['storageSecret'] }}"
  when:
    - status['storageSecret'] is defined
    - status['storageSecret'] | length

- name: Set DB fields encryption secret if found
  set_fact:
    db_fields_encryption_secret: "{{ status['dbFieldsEncryptionSecret'] }}"
  when:
    - status['dbFieldsEncryptionSecret'] is defined
    - status['dbFieldsEncryptionSecret'] | length

- name: Set galaxy signing secret if found
  set_fact:
    signing_secret: "{{ status['signingSecret'] }}"
  when:
    - status['signingSecret'] is defined
    - status['signingSecret'] | length

- name: Set container token secret if found
  set_fact:
    container_token_secret: "{{ status['containerTokenSecret'] }}"
  when:
    - status['containerTokenSecret'] is defined
    - status['containerTokenSecret'] | length

- name: Set SSO secret if found
  set_fact:
    sso_secret: "{{ status['ssoSecret'] }}"
  when:
    - status['ssoSecret'] is defined
    - status['ssoSecret'] | length

- name: Get PVC information
  k8s_info:
    kind: PersistentVolumeClaim
    namespace: '{{ ansible_operator_meta.namespace }}'
    name: '{{ storage_claim }}'
  register: _storage_claim
  when: storage_claim is defined

- name: Set storage claim access mode
  set_fact:
    pvc_access_mode: "{{ _storage_claim['resources'][0]['spec']['accessModes'][0] }}"
  when:
    - _storage_claim['resources'][0]['spec'] is defined
    - _storage_claim['resources'][0]['spec']['accessModes'] is defined
    - _storage_claim['resources'][0]['spec']['accessModes'][0] is defined
    - _storage_claim['resources'][0]['spec']['accessModes'][0] | length

- name: Set user provided postgres image
  set_fact:
    _custom_postgres_image: "{{ postgres_image }}"
  when:
    - postgres_image is defined and postgres_image != ''

- name: Set Postgres image URL
  set_fact:
    _postgres_image: "{{ _custom_postgres_image | default(lookup('env', 'RELATED_IMAGE_PULP_POSTGRES')) | default(_postgres_image, true) }}"

- name: Create management pod from templated deployment config
  k8s:
    state: present
    definition: "{{ lookup('template', 'templates/management-pod.yaml.j2') | from_yaml }}"
    wait: true
