---
- k8s_status:
    api_version: "{{ api_version }}"
    kind: "{{ kind }}"
    name: "{{ ansible_operator_meta.name }}"
    namespace: "{{ ansible_operator_meta.namespace }}"
    conditions:
      - type: "{{ deployment_type|capitalize }}-API-Ready"
        message: Configuring DB fields encryption Secret name
        reason: ConfiguringDBFieldsEncryption
        status: "False"
        lastTransitionTime: "{{ lookup('pipe', 'date --iso-8601=seconds') }}"

- name: Set default DB fields encryption secret name
  set_fact:
    db_fields_encryption_secret: '{{ ansible_operator_meta.name }}-db-fields-encryption'
    cacheable: yes
  when: db_fields_encryption_secret is undefined

- name: Check for specified DB fields encryption configuration
  k8s_info:
    kind: Secret
    namespace: '{{ ansible_operator_meta.namespace }}'
    name: '{{ db_fields_encryption_secret }}'
  register: _db_fields_encryption_secret
  no_log: "{{ no_log }}"

- block:
    - k8s_status:
        api_version: "{{ api_version }}"
        kind: "{{ kind }}"
        name: "{{ ansible_operator_meta.name }}"
        namespace: "{{ ansible_operator_meta.namespace }}"
        conditions:
          - type: "{{ deployment_type|capitalize }}-API-Ready"
            message: Creating DB fields encryption Secret
            reason: CreatingDBSecret
            status: "False"
            lastTransitionTime: "{{ lookup('pipe', 'date --iso-8601=seconds') }}"

    - name: Generate Pulp Database Encryption Key
      shell: |
        from cryptography.fernet import Fernet
        with open("/tmp/fernet", "wb") as key_file:
            key_file.write(Fernet.generate_key())
      args:
        executable: /usr/bin/python3
      no_log: "{{ no_log }}"

    - name: Store DB fields encryption key
      set_fact:
        db_fields_encryption_key: "{{ lookup('file', '/tmp/fernet') }}"
      no_log: "{{ no_log }}"

    - name: Create DB fields encryption secret
      k8s:
        apply: true
        definition: "{{ lookup('template', 'pulp-db-fields-encryption.secret.yaml.j2') }}"
      no_log: "{{ no_log }}"

    - name: Remove ownerReferences from DB fields encryption secret to avoid garbage collection
      k8s:
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: '{{ ansible_operator_meta.name }}-db-fields-encryption'
            namespace: '{{ ansible_operator_meta.namespace }}'
            ownerReferences: null
      no_log: "{{ no_log }}"

  when: not _db_fields_encryption_secret['resources'] | default([]) | length
