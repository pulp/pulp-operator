---
- k8s_status:
    api_version: "{{ api_version }}"
    kind: "{{ kind }}"
    name: "{{ ansible_operator_meta.name }}"
    namespace: "{{ ansible_operator_meta.namespace }}"
    conditions:
      - type: "{{ deployment_type|capitalize }}-API-Ready"
        message: Checking SSO Secret configurations
        reason: CheckingSSOSecret
        status: "False"
        lastTransitionTime: "{{ lookup('pipe', 'date --iso-8601=seconds') }}"

- name: Check for specified sso configuration secret
  k8s_info:
    kind: Secret
    namespace: '{{ ansible_operator_meta.namespace }}'
    name: '{{ sso_secret }}'
  register: _sso_configuration
  no_log: "{{ no_log }}"

- name: Check sso secret data format
  set_fact:
    sso_secret_data_available: true
  when:
    - _sso_configuration is defined
    - _sso_configuration.resources is defined
    - _sso_configuration.resources[0] is defined
    - _sso_configuration.resources[0].data is defined

- block:
  - k8s_status:
      api_version: "{{ api_version }}"
      kind: "{{ kind }}"
      name: "{{ ansible_operator_meta.name }}"
      namespace: "{{ ansible_operator_meta.namespace }}"
      conditions:
        - type: "{{ deployment_type|capitalize }}-API-Ready"
          message: Unexpected format in SSO Secret
          reason: UnexpectedSSOSecretFormat
          status: "False"

  - name: Fail if sso secret object is an unexpected format
    fail:
      msg: "Cannot read the data for secret {{ _sso_configuration  }}"
  when:
    - not sso_secret_data_available

- name: Check if social_auth_keycloak_key is found
  set_fact:
    social_auth_keycloak_key_available: true
  when:
    - _sso_configuration.resources[0].data['social_auth_keycloak_key'] is defined
    - _sso_configuration.resources[0].data['social_auth_keycloak_key'] | length

- name: Check if social_auth_keycloak_secret is found
  set_fact:
    social_auth_keycloak_secret_available: true
  when:
    - _sso_configuration.resources[0].data['social_auth_keycloak_secret'] is defined
    - _sso_configuration.resources[0].data['social_auth_keycloak_secret'] | length

- name: Check if social_auth_keycloak_public_key is found
  set_fact:
    social_auth_keycloak_public_key_available: true
  when:
    - _sso_configuration.resources[0].data['social_auth_keycloak_public_key'] is defined
    - _sso_configuration.resources[0].data['social_auth_keycloak_public_key'] | length

- name: Store social_auth_keycloak_public_key
  set_fact:
    social_auth_keycloak_public_key: "{{ _sso_configuration.resources[0].data['social_auth_keycloak_public_key'] | b64decode }}"
  no_log: "{{ no_log }}"

- name: Check if keycloak_host is found
  set_fact:
    keycloak_host_available: true
  when:
    - _sso_configuration.resources[0].data['keycloak_host'] is defined
    - _sso_configuration.resources[0].data['keycloak_host'] | length

- name: Check if keycloak_protocol is found
  set_fact:
    keycloak_protocol_available: true
  when:
    - _sso_configuration.resources[0].data['keycloak_protocol'] is defined
    - _sso_configuration.resources[0].data['keycloak_protocol'] | length

- name: Check if keycloak_port is found
  set_fact:
    keycloak_port_available: true
  when:
    - _sso_configuration.resources[0].data['keycloak_port'] is defined
    - _sso_configuration.resources[0].data['keycloak_port'] | length

- name: Check if keycloak_realm is found
  set_fact:
    keycloak_realm_available: true
  when:
    - _sso_configuration.resources[0].data['keycloak_realm'] is defined
    - _sso_configuration.resources[0].data['keycloak_realm'] | length

- name: Check if keycloak_admin_role is found
  set_fact:
    keycloak_admin_role_available: true
  when:
    - _sso_configuration.resources[0].data['keycloak_admin_role'] is defined
    - _sso_configuration.resources[0].data['keycloak_admin_role'] | length

- name: Check if keycloak_group_token_claim is found
  set_fact:
    keycloak_group_token_claim_available: true
  when:
    - _sso_configuration.resources[0].data['keycloak_group_token_claim'] is defined
    - _sso_configuration.resources[0].data['keycloak_group_token_claim'] | length

- name: Check if keycloak_role_token_claim is found
  set_fact:
    keycloak_role_token_claim_available: true
  when:
    - _sso_configuration.resources[0].data['keycloak_role_token_claim'] is defined
    - _sso_configuration.resources[0].data['keycloak_role_token_claim'] | length

- name: Check if keycloak_host_loopback is found
  set_fact:
    keycloak_host_loopback_available: true
  when:
    - _sso_configuration.resources[0].data['keycloak_host_loopback'] is defined
    - _sso_configuration.resources[0].data['keycloak_host_loopback'] | length

### Check to make sure all required sso config values are set before proceeding
- block:
  - k8s_status:
      api_version: "{{ api_version }}"
      kind: "{{ kind }}"
      name: "{{ ansible_operator_meta.name }}"
      namespace: "{{ ansible_operator_meta.namespace }}"
      conditions:
        - type: "{{ deployment_type|capitalize }}-API-Ready"
          message: Missing SSO fields on Secret
          reason: MissingSSOFields
          status: "False"
          lastTransitionTime: "{{ lookup('pipe', 'date --iso-8601=seconds') }}"

  - name: Fail if required sso secret items are not present
    fail:
      msg: "Secret {{ sso_secret }} is missing required configuration data."

  when:
    - sso_secret_data_available
    - not social_auth_keycloak_key_available
    - not social_auth_keycloak_secret_available
    - not social_auth_keycloak_public_key_available
    - not keycloak_host_available
    - not keycloak_protocol_available
    - not keycloak_port_available
    - not keycloak_realm_available

### Store Required Variables
- name: Store social_auth_keycloak_key
  set_fact:
    social_auth_keycloak_key: "{{ _sso_configuration.resources[0].data['social_auth_keycloak_key'] | b64decode }}"
  no_log: "{{ no_log }}"

- name: Store social_auth_keycloak_secret
  set_fact:
    social_auth_keycloak_secret: "{{ _sso_configuration.resources[0].data['social_auth_keycloak_secret'] | b64decode }}"
  no_log: "{{ no_log }}"

- name: Store social_auth_keycloak_public_key
  set_fact:
    social_auth_keycloak_public_key: "{{ _sso_configuration.resources[0].data['social_auth_keycloak_public_key'] | b64decode }}"
  no_log: "{{ no_log }}"

- name: Store keycloak_host
  set_fact:
    keycloak_host: "{{ _sso_configuration.resources[0].data['keycloak_host'] | b64decode }}"
  no_log: "{{ no_log }}"

- name: Store keycloak_protocol
  set_fact:
    keycloak_protocol: "{{ _sso_configuration.resources[0].data['keycloak_protocol'] | b64decode }}"
  no_log: "{{ no_log }}"

- name: Store keycloak_port
  set_fact:
    keycloak_port: "{{ _sso_configuration.resources[0].data['keycloak_port'] | b64decode }}"
  no_log: "{{ no_log }}"

- name: Store keycloak_realm
  set_fact:
    keycloak_realm: "{{ _sso_configuration.resources[0].data['keycloak_realm'] | b64decode }}"
  no_log: "{{ no_log }}"

### Store Optional Variables
- name: Store keycloak_admin_role
  set_fact:
    keycloak_admin_role: "{{ _sso_configuration.resources[0].data['keycloak_admin_role'] | b64decode }}"
  when: keycloak_admin_role_available | default(False)
  no_log: "{{ no_log }}"

- name: Store keycloak_group_token_claim
  set_fact:
    keycloak_group_token_claim: "{{ _sso_configuration.resources[0].data['keycloak_group_token_claim'] | b64decode }}"
  when: keycloak_group_token_claim_available | default(False)
  no_log: "{{ no_log }}"

- name: Store keycloak_role_token_claim
  set_fact:
    keycloak_role_token_claim: "{{ _sso_configuration.resources[0].data['keycloak_role_token_claim'] | b64decode }}"
  when: keycloak_role_token_claim_available | default(False)
  no_log: "{{ no_log }}"

- name: Store keycloak_host_loopback
  set_fact:
    keycloak_host_loopback: "{{ _sso_configuration.resources[0].data['keycloak_host_loopback'] | b64decode }}"
  when: keycloak_host_loopback_available | default(False)
  no_log: "{{ no_log }}"

- name: Add SSO settings to sso_settings dict
  block:

    - set_fact:
        sso_settings:
          social_auth_keycloak_key: "{{ social_auth_keycloak_key }}"
          social_auth_keycloak_secret: "{{ social_auth_keycloak_secret }}"
          social_auth_keycloak_public_key: "{{ social_auth_keycloak_public_key }}"
          social_auth_login_redirect_url: "{{ social_auth_login_redirect_url | default(omit) }}"
          social_auth_redirect_is_https: True
          keycloak_host: "{{ keycloak_host }}"
          keycloak_port: "{{ keycloak_port }}"
          keycloak_protocol: "{{ keycloak_protocol }}"
          keycloak_realm: "{{ keycloak_realm }}"
          keycloak_admin_role: "{{ keycloak_admin_role }}"
          keycloak_group_token_claim: "{{ keycloak_group_token_claim | default(omit) }}"
          keycloak_role_token_claim: "{{ keycloak_role_token_claim | default(omit) }}"
          keycloak_host_loopback: "{{ keycloak_host_loopback | default(omit) }}"

    - name: Inject SSO settings into pulp_settings
      set_fact:
        pulp_combined_settings: "{{ pulp_combined_settings | combine(sso_settings, recursive=True) }}"

  run_once: true
  no_log: "{{ no_log }}"
