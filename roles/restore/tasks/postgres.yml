---

- name: Check for specified PostgreSQL configuration
  k8s_info:
    kind: Secret
    namespace: '{{ ansible_operator_meta.namespace }}'
    name: '{{ db_secret_name }}'
  register: _custom_pg_config_resources
  no_log: "{{ no_log }}"
  when:
    - db_secret_name is defined
    - db_secret_name | length

- name: Check for default PostgreSQL configuration
  k8s_info:
    kind: Secret
    namespace: '{{ ansible_operator_meta.namespace }}'
    name: '{{ deployment_name }}-postgres-configuration'
  register: _default_pg_config_resources
  no_log: "{{ no_log }}"

- name: Set PostgreSQL configuration
  set_fact:
    pg_config: '{{ _custom_pg_config_resources["resources"] | default([]) | length | ternary(_custom_pg_config_resources, _default_pg_config_resources) }}'
  no_log: "{{ no_log }}"

- name: Store Database Configuration
  set_fact:
    postgres_user: "{{ pg_config['resources'][0]['data']['username'] | b64decode }}"
    postgres_pass: "{{ pg_config['resources'][0]['data']['password'] | b64decode }}"
    postgres_database: "{{ pg_config['resources'][0]['data']['database'] | b64decode }}"
    postgres_port: "{{ pg_config['resources'][0]['data']['port'] | b64decode }}"
    postgres_host: "{{ pg_config['resources'][0]['data']['host'] | b64decode }}"
    postgres_sslmode: "{{ pg_config['resources'][0]['data']['sslmode'] | default('prefer'|b64encode) | b64decode }}"
    postgres_type: "{{ pg_config['resources'][0]['data']['type'] | default('unmanaged'|b64encode) | b64decode }}"
  no_log: "{{ no_log }}"

- name: Default label selector to custom resource generated postgres
  set_fact:
    postgres_label_selector: "app.kubernetes.io/instance=postgres-{{ deployment_name }}"
  when: postgres_label_selector is not defined

- block:
    - name: Get the postgres pod information
      k8s_info:
        kind: Pod
        namespace: '{{ ansible_operator_meta.namespace }}'
        label_selectors:
          - "{{ postgres_label_selector }}"
          - "app.kubernetes.io/version={{ postgres_version }}"
      register: postgres_pod
      until:
        - "postgres_pod['resources'] | length"
        - "postgres_pod['resources'][0]['status']['phase'] == 'Running'"
      delay: 5
      retries: 60

    - name: Set the resource pod name as a variable.
      set_fact:
        postgres_pod_name: "{{ postgres_pod['resources'][0]['metadata']['name'] }}"
  when: postgres_type == 'managed'

- include: scale_down.yml deploy_name={{ item }}
  with_items:
    - "{{ deployment_name}}-api"
    - "{{ deployment_name }}-content"
    - "{{ deployment_name }}-resource-manager"
    - "{{ deployment_name }}-worker"
    - "{{ deployment_name }}-web"

- name: Set pg_restore command
  set_fact:
    psql_restore: >-
      psql -U {{ postgres_user }}
      -h {{ postgres_host }}
      -U {{ postgres_user }}
      -d {{ postgres_database }}
      -p {{ postgres_port }}
  no_log: "{{ no_log }}"

- name: Restore database dump to the new postgresql container
  k8s_exec:
    namespace: "{{ backup_pvc_namespace }}"
    pod: "{{ ansible_operator_meta.name }}-backup-manager"
    command: |
      bash -c """
      set -e -o pipefail
      cat {{ backup_dir }}/pulp.db | PGPASSWORD={{ postgres_pass }} {{ psql_restore }}
      echo 'Successful'
      """
  register: data_migration
  no_log: "{{ no_log }}"
  failed_when: "'Successful' not in data_migration.stdout"
