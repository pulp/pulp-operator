---

- name: Look up details for the backup
  k8s_info:
    api_version: "{{ backup_api_version }}"
    kind: "{{ backup_kind }}"
    name: "{{ backup_name }}"
    namespace: "{{ ansible_operator_meta.namespace }}"
  register: this_backup
  when:
    - backup_name is defined
    - backup_name | length

- name: Surface error to user
  block:
    - name: Set error message
      set_fact:
        error_msg: "Cannot read the backup data for {{ backup_kind }} {{ backup_name  }}."

    - name: Handle error
      import_tasks: error_handling.yml

    - name: Fail early if pvc is defined but does not exist
      fail:
        msg: "{{ error_msg }}"
  when:
    - backup_name is defined
    - backup_name | length
    - this_backup['resources'] | length == 0
    - this_backup['resources'][0] is not defined
    - this_backup['resources'][0]['status'] is not defined
    - this_backup['resources'][0]['status']['deploymentName'] is not defined
    - this_backup['resources'][0]['status']['backupClaim'] is not defined
    - this_backup['resources'][0]['status']['backupDirectory'] is not defined
    - this_backup['resources'][0]['status']['backupNamespace'] is not defined
    - this_backup['resources'][0]['status']['deploymentStorageType'] is not defined
    - this_backup['resources'][0]['status']['adminPasswordSecret'] is not defined
    - this_backup['resources'][0]['status']['databaseConfigurationSecret'] is not defined

- name: Set backup facts
  set_fact:
    deployment_name: "{{ this_backup['resources'][0]['status']['deploymentName'] }}"
    backup_pvc: "{{ this_backup['resources'][0]['status']['backupClaim'] }}"
    backup_pvc_namespace: "{{ this_backup['resources'][0]['status']['backupNamespace'] }}"
    backup_dir: "{{ this_backup['resources'][0]['status']['backupDirectory'] }}"
    storage_type: "{{ this_backup['resources'][0]['status']['deploymentStorageType'] }}"
    admin_password_name: "{{ this_backup['resources'][0]['status']['adminPasswordSecret'] }}"
    db_secret_name: "{{ this_backup['resources'][0]['status']['databaseConfigurationSecret'] }}"
  when:
    - backup_name is defined
    - backup_name | length

- name: Set optional objectstorage backup fact
  set_fact:
    storage_secret: "{{ this_backup['resources'][0]['status']['objectStorageConfigurationSecret'] }}"
  when:
    - backup_name is defined
    - backup_name | length
    - this_backup['resources'][0]['status']['objectStorageConfigurationSecret'] is defined

- name: Set optional DB fields encryption backup fact
  set_fact:
    db_fields_encryption_secret: "{{ this_backup['resources'][0]['status']['dbFieldsEncryptionSecret'] }}"
  when:
    - backup_name is defined
    - backup_name | length
    - this_backup['resources'][0]['status']['dbFieldsEncryptionSecret'] is defined

- name: Set optional container token backup fact
  set_fact:
    container_token_secret: "{{ this_backup['resources'][0]['status']['containerTokenSecret'] }}"
  when:
    - backup_name is defined
    - backup_name | length
    - this_backup['resources'][0]['status']['containerTokenSecret'] is defined

- name: Set optional sso secret
  set_fact:
    sso_secret: "{{ this_backup['resources'][0]['status']['ssoSecret'] }}"
  when:
    - backup_name is defined
    - backup_name | length
    - this_backup['resources'][0]['status']['ssoSecret'] is defined

- name: Surface error to user
  block:
    - name: Set error message
      set_fact:
        error_msg: "Cannot perform restore with the given specifications."

    - name: Handle error
      import_tasks: error_handling.yml

    - name: Fail early if pvc is defined but does not exist
      fail:
        msg: "{{ error_msg }}"
  when:
    - deployment_name is not defined
    - backup_pvc is not defined
    - backup_pvc_namespace is not defined
    - backup_dir is not defined
    - storage_type is not defined

# Check to make sure provided pvc exists, error loudly if not.  Otherwise, the management pod will just stay in pending state forever.
- name: Check provided PVC exists
  k8s_info:
    name: "{{ backup_pvc }}"
    kind: PersistentVolumeClaim
    namespace: "{{ backup_pvc_namespace }}"
  register: provided_pvc
  when:
    - backup_pvc != ''

- name: Surface error to user
  block:
    - name: Set error message
      set_fact:
        error_msg: "{{ backup_pvc }} does not exist, restore cannot be performed."

    - name: Handle error
      import_tasks: error_handling.yml

    - name: Fail early if pvc is defined but does not exist
      fail:
        msg: "{{ error_msg }}"
  when:
    - backup_pvc != ''
    - provided_pvc.resources | length == 0

- name: Delete any existing management pod
  k8s:
    name: "{{ ansible_operator_meta.name }}-backup-manager"
    kind: Pod
    namespace: "{{ backup_pvc_namespace }}"
    state: absent
    force: true
    wait: true

- name: Set user provided postgres image
  set_fact:
    _custom_postgres_image: "{{ postgres_image }}"
  when:
    - postgres_image is defined and postgres_image != ''

- name: Set Postgres image URL
  set_fact:
    _postgres_image: "{{ _custom_postgres_image | default(lookup('env', 'RELATED_IMAGE_PULP_POSTGRES')) | default(_postgres_image, true) }}"

- name: Create management pod from templated deployment config
  k8s:
    state: present
    definition: "{{ lookup('template', 'templates/management-pod.yaml.j2') | from_yaml }}"
    wait: true

- name: Check to make sure backup directory exists on PVC
  k8s_exec:
    namespace: "{{ backup_pvc_namespace}}"
    pod: "{{ ansible_operator_meta.name }}-backup-manager"
    command: >-
      bash -c "stat {{ backup_dir }}"
  register: stat_backup_dir

- name: Error if backup dir is missing
  block:
    - name: Set error message
      set_fact:
        error_msg: "{{ backup_dir }} does not exist on PersistentVolumeClaim {{ backup_pvc }}, restore cannot be performed."

    - name: Handle error
      import_tasks: error_handling.yml

    - name: Fail early if backup dir provided does not exist
      fail:
        msg: "{{ error_msg }}"
  when:
    - backup_dir != ''
    - backup_dir not in stat_backup_dir.stdout
